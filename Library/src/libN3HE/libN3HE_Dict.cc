//
// File generated by rootcint at Sun Apr 20 00:16:01 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME libN3HE_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "libN3HE_Dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TBranchBinary_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBranchBinary(void *p = 0);
   static void *newArray_TBranchBinary(Long_t size, void *p);
   static void delete_TBranchBinary(void *p);
   static void deleteArray_TBranchBinary(void *p);
   static void destruct_TBranchBinary(void *p);
   static void streamer_TBranchBinary(TBuffer &buf, void *obj);
   static void reset_TBranchBinary(void *obj, TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TBranchBinary*)
   {
      ::TBranchBinary *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBranchBinary >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBranchBinary", ::TBranchBinary::Class_Version(), "./TBranchBinary.h", 8,
                  typeid(::TBranchBinary), DefineBehavior(ptr, ptr),
                  &::TBranchBinary::Dictionary, isa_proxy, 0,
                  sizeof(::TBranchBinary) );
      instance.SetNew(&new_TBranchBinary);
      instance.SetNewArray(&newArray_TBranchBinary);
      instance.SetDelete(&delete_TBranchBinary);
      instance.SetDeleteArray(&deleteArray_TBranchBinary);
      instance.SetDestructor(&destruct_TBranchBinary);
      instance.SetStreamerFunc(&streamer_TBranchBinary);
      instance.SetResetAfterMerge(&reset_TBranchBinary);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TBranchBinary*)
   {
      return GenerateInitInstanceLocal((::TBranchBinary*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBranchBinary*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TBranchBinary::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TBranchBinary::Class_Name()
{
   return "TBranchBinary";
}

//______________________________________________________________________________
const char *TBranchBinary::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBranchBinary*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBranchBinary::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBranchBinary*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBranchBinary::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBranchBinary*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBranchBinary::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBranchBinary*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TBranchBinary::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBranchBinary.

   TBranch::Streamer(R__b);
}

//______________________________________________________________________________
void TBranchBinary::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBranchBinary.
      TClass *R__cl = ::TBranchBinary::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfiles", &fNfiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileList", &fFileList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLeafList", &fLeafList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileIndex", &fFileIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileIndexOrig", &fFileIndexOrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentFile", &fCurrentFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecLength", &fRecLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecOffset", &fRecOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBuffer", &fBuffer);
      TBranch::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TBranchBinary(void *p) {
      return  p ? new(p) ::TBranchBinary : new ::TBranchBinary;
   }
   static void *newArray_TBranchBinary(Long_t nElements, void *p) {
      return p ? new(p) ::TBranchBinary[nElements] : new ::TBranchBinary[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBranchBinary(void *p) {
      delete ((::TBranchBinary*)p);
   }
   static void deleteArray_TBranchBinary(void *p) {
      delete [] ((::TBranchBinary*)p);
   }
   static void destruct_TBranchBinary(void *p) {
      typedef ::TBranchBinary current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBranchBinary(TBuffer &buf, void *obj) {
      ((::TBranchBinary*)obj)->::TBranchBinary::Streamer(buf);
   }
   // Wrapper around the Reset function.
   static void reset_TBranchBinary(void *obj,TFileMergeInfo *info) {
      ((::TBranchBinary*)obj)->ResetAfterMerge(info);
   }
} // end of namespace ROOT for class ::TBranchBinary

/********************************************************
* libN3HE_Dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablelibN3HE_Dict();

extern "C" void G__set_cpp_environmentlibN3HE_Dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TBranchBinary.h");
  G__cpp_reset_tagtablelibN3HE_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevlibN3HE_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TBranchBinary */
static int G__libN3HE_Dict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBranchBinary* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary[n];
     } else {
       p = new((void*) gvp) TBranchBinary[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary;
     } else {
       p = new((void*) gvp) TBranchBinary;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBranchBinary* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TBranchBinary(
(TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char**) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((TBranchBinary*) G__getstructoffset())->GetFileIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBranchBinary*) G__getstructoffset())->SetFileIndex((int*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBranchBinary::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBranchBinary::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBranchBinary::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBranchBinary::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBranchBinary*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBranchBinary::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBranchBinary::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBranchBinary::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libN3HE_Dict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBranchBinary::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBranchBinary G__TTBranchBinary;
static int G__libN3HE_Dict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBranchBinary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBranchBinary*) (soff+(sizeof(TBranchBinary)*i)))->~G__TTBranchBinary();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBranchBinary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBranchBinary*) (soff))->~G__TTBranchBinary();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TBranchBinary */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunclibN3HE_Dict {
 public:
  G__Sizep2memfunclibN3HE_Dict(): p(&G__Sizep2memfunclibN3HE_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunclibN3HE_Dict::*p)();
};

size_t G__get_sizep2memfunclibN3HE_Dict()
{
  G__Sizep2memfunclibN3HE_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancelibN3HE_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary))) {
     TBranchBinary *G__Lderived;
     G__Lderived=(TBranchBinary*)0x1000;
     {
       TBranch *G__Lpbase=(TBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary),G__get_linked_tagnum(&G__libN3HE_DictLN_TBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary),G__get_linked_tagnum(&G__libN3HE_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary),G__get_linked_tagnum(&G__libN3HE_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary),G__get_linked_tagnum(&G__libN3HE_DictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablelibN3HE_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TBranchBinary */
static void G__setup_memvarTBranchBinary(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary));
   { TBranchBinary *p; p=(TBranchBinary*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fNfiles)-(long)(p)),105,0,0,-1,-1,-1,1,"fNfiles=",0,"number of runs");
   G__memvar_setup((void*)((long)(&p->fFileList)-(long)(p)),67,2,1,-1,-1,-1,1,"fFileList=",0,"list of files for each run");
   G__memvar_setup((void*)((long)(&p->fLeafList)-(long)(p)),67,0,1,-1,-1,-1,1,"fLeafList=",0,"list of ntuple columns");
   G__memvar_setup((void*)((long)(&p->fFileIndex)-(long)(p)),73,0,0,-1,-1,-1,1,"fFileIndex=",0,"cumulative list of entries");
   G__memvar_setup((void*)((long)(&p->fFileIndexOrig)-(long)(p)),73,0,0,-1,-1,-1,1,"fFileIndexOrig=",0,"for destructor");
   G__memvar_setup((void*)((long)(&p->fCurrentFile)-(long)(p)),105,0,0,-1,-1,-1,1,"fCurrentFile=",0,"current file index");
   G__memvar_setup((void*)((long)(&p->fFile)-(long)(p)),69,0,0,-1,-1,-1,1,"fFile=",0,"current file handle");
   G__memvar_setup((void*)((long)(&p->fRecLength)-(long)(p)),105,0,0,-1,-1,-1,1,"fRecLength=",0,"binary file record length");
   G__memvar_setup((void*)((long)(&p->fRecOffset)-(long)(p)),105,0,0,-1,-1,-1,1,"fRecOffset=",0,"offset to fields of interest");
   G__memvar_setup((void*)((long)(&p->fBuffer)-(long)(p)),67,0,0,-1,-1,-1,1,"fBuffer=",0,"buffer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libN3HE_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarlibN3HE_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTBranchBinary(void) {
   /* TBranchBinary */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary));
   G__memfunc_setup("TBranchBinary",1287,G__libN3HE_Dict_204_0_1, 105, G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBranchBinary",1287,G__libN3HE_Dict_204_0_2, 105, G__get_linked_tagnum(&G__libN3HE_DictLN_TBranchBinary), -1, 0, 7, 1, 1, 0, 
"U 'TTree' - 0 - tree i - - 0 - nfiles "
"C - - 12 - filelist C - - 10 - leaflist "
"C - - 10 '0' name i - - 0 '-1' length "
"i - - 0 '0' offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"n - 'Long64_t' 0 '0' entry i - 'Int_t' 0 '0' getall", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFileIndex",1176,G__libN3HE_Dict_204_0_4, 73, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileIndex",1188,G__libN3HE_Dict_204_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "I - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__libN3HE_Dict_204_0_6, 85, G__get_linked_tagnum(&G__libN3HE_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBranchBinary::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__libN3HE_Dict_204_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBranchBinary::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__libN3HE_Dict_204_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBranchBinary::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__libN3HE_Dict_204_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBranchBinary::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__libN3HE_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__libN3HE_Dict_204_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__libN3HE_Dict_204_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBranchBinary::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__libN3HE_Dict_204_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBranchBinary::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__libN3HE_Dict_204_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBranchBinary::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__libN3HE_Dict_204_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBranchBinary::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TBranchBinary", 1413, G__libN3HE_Dict_204_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunclibN3HE_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globallibN3HE_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funclibN3HE_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__libN3HE_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__libN3HE_DictLN_TBranchBinary = { "TBranchBinary" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablelibN3HE_Dict() {
  G__libN3HE_DictLN_TClass.tagnum = -1 ;
  G__libN3HE_DictLN_TBuffer.tagnum = -1 ;
  G__libN3HE_DictLN_TMemberInspector.tagnum = -1 ;
  G__libN3HE_DictLN_TObject.tagnum = -1 ;
  G__libN3HE_DictLN_TNamed.tagnum = -1 ;
  G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__libN3HE_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__libN3HE_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__libN3HE_DictLN_TAttFill.tagnum = -1 ;
  G__libN3HE_DictLN_TTree.tagnum = -1 ;
  G__libN3HE_DictLN_TBranch.tagnum = -1 ;
  G__libN3HE_DictLN_TBranchBinary.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablelibN3HE_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TTree);
   G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libN3HE_DictLN_TBranchBinary),sizeof(TBranchBinary),-1,62720,(char*)NULL,G__setup_memvarTBranchBinary,G__setup_memfuncTBranchBinary);
}
extern "C" void G__cpp_setuplibN3HE_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setuplibN3HE_Dict()");
  G__set_cpp_environmentlibN3HE_Dict();
  G__cpp_setup_tagtablelibN3HE_Dict();

  G__cpp_setup_inheritancelibN3HE_Dict();

  G__cpp_setup_typetablelibN3HE_Dict();

  G__cpp_setup_memvarlibN3HE_Dict();

  G__cpp_setup_memfunclibN3HE_Dict();
  G__cpp_setup_globallibN3HE_Dict();
  G__cpp_setup_funclibN3HE_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunclibN3HE_Dict();
  return;
}
class G__cpp_setup_initlibN3HE_Dict {
  public:
    G__cpp_setup_initlibN3HE_Dict() { G__add_setup_func("libN3HE_Dict",(G__incsetup)(&G__cpp_setuplibN3HE_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initlibN3HE_Dict() { G__remove_setup_func("libN3HE_Dict"); }
};
G__cpp_setup_initlibN3HE_Dict G__cpp_setup_initializerlibN3HE_Dict;

